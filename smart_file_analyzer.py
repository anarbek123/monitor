"""
–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import os
import json
import logging
import hashlib
from pathlib import Path
from datetime import datetime
from document_monitor import HumanLikeDocumentMonitor

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('smart_file_analyzer.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def get_file_hash(filepath):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'rb') as f:
            file_hash = hashlib.md5(f.read()).hexdigest()
        return file_hash
    except Exception:
        return None

def analyze_file_status():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤"""
    logger = setup_logging()
    
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤...")
    logger.info("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open('discovered_files.json', 'r', encoding='utf-8') as f:
            discovered_data = json.load(f)
        
        with open('downloaded_files.json', 'r', encoding='utf-8') as f:
            downloaded_data = json.load(f)
    except FileNotFoundError as e:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return
    
    monitor = HumanLikeDocumentMonitor()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    file_status = {
        'missing_completely': [],      # –§–∞–π–ª–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ
        'missing_on_disk': [],         # –ó–∞–ø–∏—Å—å –µ—Å—Ç—å, —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        'outdated_records': [],        # –§–∞–π–ª –µ—Å—Ç—å, –∑–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞
        'correctly_tracked': [],       # –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        'needs_redownload': []         # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–∫–∞—á–∞—Ç—å
    }
    
    total_files = len(discovered_data.get('files', {}))
    logger.info(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_files}")
    
    for i, (url, file_info) in enumerate(discovered_data.get('files', {}).items(), 1):
        filename = os.path.basename(url)
        logger.debug(f"üîç [{i}/{total_files}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {filename}")
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª
        expected_dir = monitor.create_aifc_directory_structure(url, monitor.config['download_dir'])
        expected_filename = monitor.get_clean_filename(url)
        expected_path = os.path.join(expected_dir, expected_filename)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        file_exists_on_disk = os.path.exists(expected_path)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ downloaded_files.json
        is_in_download_records = url in downloaded_data
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–º–µ—Ç–∫—É –≤ discovered_files.json
        is_marked_downloaded = file_info.get('downloaded', False)
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        if not file_exists_on_disk and not is_in_download_records:
            # –§–∞–π–ª–∞ –Ω–µ—Ç —Å–æ–≤—Å–µ–º - –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
            file_status['missing_completely'].append({
                'url': url,
                'expected_path': expected_path,
                'reason': '–§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–Ω'
            })
            
        elif not file_exists_on_disk and is_in_download_records:
            # –ó–∞–ø–∏—Å—å –µ—Å—Ç—å, –Ω–æ —Ñ–∞–π–ª –ø–æ—Ç–µ—Ä—è–Ω - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–∫–∞—á–∞—Ç—å
            file_status['missing_on_disk'].append({
                'url': url,
                'expected_path': expected_path,
                'recorded_path': downloaded_data[url].get('path', 'unknown'),
                'reason': '–§–∞–π–ª –ø–æ—Ç–µ—Ä—è–Ω —Å –¥–∏—Å–∫–∞'
            })
            
        elif file_exists_on_disk and not is_marked_downloaded:
            # –§–∞–π–ª –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏
            file_status['outdated_records'].append({
                'url': url,
                'existing_path': expected_path,
                'reason': '–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏'
            })
            
        elif file_exists_on_disk and is_marked_downloaded and is_in_download_records:
            # –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            file_status['correctly_tracked'].append({
                'url': url,
                'path': expected_path,
                'reason': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            })
            
        else:
            # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π - –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
            file_status['needs_redownload'].append({
                'url': url,
                'expected_path': expected_path,
                'reason': f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å (exists:{file_exists_on_disk}, marked:{is_marked_downloaded}, recorded:{is_in_download_records})"
            })
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("üìã –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–ê –§–ê–ô–õ–û–í:")
    logger.info(f"‚ùå –ù–µ —Å–∫–∞—á–∞–Ω—ã —Å–æ–≤—Å–µ–º: {len(file_status['missing_completely'])}")
    logger.info(f"üíæ –ü–æ—Ç–µ—Ä—è–Ω—ã —Å –¥–∏—Å–∫–∞: {len(file_status['missing_on_disk'])}")
    logger.info(f"üìù –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏: {len(file_status['outdated_records'])}")
    logger.info(f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {len(file_status['correctly_tracked'])}")
    logger.info(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {len(file_status['needs_redownload'])}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, files in file_status.items():
        if files and category != 'correctly_tracked':  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            logger.info(f"\nüìã {category.upper()}:")
            for file_info in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.info(f"   ‚Ä¢ {os.path.basename(file_info['url'])}")
                logger.info(f"     –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
            if len(files) > 5:
                logger.info(f"   ... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    return file_status

def fix_file_records():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–π–ª–∞—Ö"""
    logger = setup_logging()
    
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–π–ª–∞—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
    file_status = analyze_file_status()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
    outdated_files = file_status['outdated_records']
    
    if outdated_files:
        logger.info(f"üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {len(outdated_files)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open('discovered_files.json', 'r', encoding='utf-8') as f:
            discovered_data = json.load(f)
        
        with open('downloaded_files.json', 'r', encoding='utf-8') as f:
            downloaded_data = json.load(f)
        
        for file_info in outdated_files:
            url = file_info['url']
            existing_path = file_info['existing_path']
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
                file_hash = get_file_hash(existing_path)
                file_size = os.path.getsize(existing_path)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º discovered_files.json
                if url in discovered_data['files']:
                    discovered_data['files'][url]['downloaded'] = True
                    discovered_data['files'][url]['last_downloaded'] = datetime.now().isoformat()
                    discovered_data['files'][url]['is_new'] = False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º downloaded_files.json
                downloaded_data[url] = {
                    'hash': file_hash,
                    'path': existing_path,
                    'downloaded_at': datetime.now().isoformat(),
                    'size': file_size,
                    'method': 'existing_file_registered'
                }
                
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {os.path.basename(existing_path)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è {url}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with open('discovered_files.json', 'w', encoding='utf-8') as f:
            json.dump(discovered_data, f, indent=2, ensure_ascii=False)
        
        with open('downloaded_files.json', 'w', encoding='utf-8') as f:
            json.dump(downloaded_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –ó–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    else:
        logger.info("‚úÖ –ù–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

def get_truly_missing_files():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å"""
    logger = setup_logging()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
    fix_file_records()
    
    # –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
    file_status = analyze_file_status()
    
    truly_missing = []
    truly_missing.extend(file_status['missing_completely'])
    truly_missing.extend(file_status['missing_on_disk'])
    truly_missing.extend(file_status['needs_redownload'])
    
    logger.info(f"\nüéØ –§–ê–ô–õ–´ –î–õ–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø:")
    logger.info(f"üì• –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å: {len(truly_missing)} —Ñ–∞–π–ª–æ–≤")
    
    if truly_missing:
        logger.info("\nüìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
        for file_info in truly_missing:
            logger.info(f"   ‚Ä¢ {os.path.basename(file_info['url'])}")
            logger.info(f"     –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
    else:
        logger.info("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    
    return [f['url'] for f in truly_missing]

if __name__ == "__main__":
    print("üîç –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤\n2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
    
    if choice == "1":
        analyze_file_status()
    elif choice == "2":
        fix_file_records()
    elif choice == "3":
        missing_files = get_truly_missing_files()
        if missing_files:
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(missing_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        else:
            print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")