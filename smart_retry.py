"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import os
import json
import logging
import time
import random
from datetime import datetime
from document_monitor import HumanLikeDocumentMonitor

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('smart_retry_downloads.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def smart_retry_with_anti_blocking():
    """–£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    logger = setup_logging()
    
    logger.info("üõ°Ô∏è –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    logger.info("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    try:
        with open('discovered_files.json', 'r', encoding='utf-8') as f:
            discovered_data = json.load(f)
        
        with open('downloaded_files.json', 'r', encoding='utf-8') as f:
            downloaded_data = json.load(f)
    except FileNotFoundError as e:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return
    
    failed_files = []
    for url, file_info in discovered_data.get('files', {}).items():
        is_downloaded = file_info.get('downloaded', False)
        is_in_downloads = url in downloaded_data
        
        file_exists = False
        if is_in_downloads and 'path' in downloaded_data[url]:
            file_exists = os.path.exists(downloaded_data[url]['path'])
        
        if not is_downloaded or not is_in_downloads or not file_exists:
            failed_files.append(url)
    
    if not failed_files:
        logger.info("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        return
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(failed_files)}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω—Ç–∏–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    config = {
        'small_batch_size': 3,      # –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
        'medium_batch_size': 5,     # –°—Ä–µ–¥–Ω–∏–µ –ø–∞–∫–µ—Ç—ã  
        'large_batch_size': 8,      # –ë–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é)
        'min_delay': 30,            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        'max_delay': 90,            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        'batch_pause': 300,         # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (5 –º–∏–Ω—É—Ç)
        'session_reset_interval': 10  # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ N —Ñ–∞–π–ª–æ–≤
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    current_hour = datetime.now().hour
    if 2 <= current_hour <= 6:  # –ù–æ—á—å - –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ
        batch_size = config['large_batch_size']
        logger.info("üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã")
    elif 9 <= current_hour <= 18:  # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        batch_size = config['small_batch_size']  
        logger.info("üåû –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–∞–∫–µ—Ç—ã")
    else:  # –í–µ—á–µ—Ä/—É—Ç—Ä–æ - —Å—Ä–µ–¥–Ω–µ
        batch_size = config['medium_batch_size']
        logger.info("üåÖ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–∞–∫–µ—Ç—ã")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
    batches = [failed_files[i:i + batch_size] for i in range(0, len(failed_files), batch_size)]
    logger.info(f"üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(batches)} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ {batch_size} —Ñ–∞–π–ª–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    try:
        monitor = HumanLikeDocumentMonitor()
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –±–æ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from enhanced_browser_bot import SuperHumanBrowserBot
            monitor.browser_bot = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–æ—Ç
            logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –±–æ—Ç")
        except ImportError:
            logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –±–æ—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä: {e}")
        return
    
    total_success = 0
    total_errors = 0
    
    for batch_num, batch in enumerate(batches, 1):
        logger.info(f"\nüéØ –ü–∞–∫–µ—Ç {batch_num}/{len(batches)} ({len(batch)} —Ñ–∞–π–ª–æ–≤)")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if batch_num > 1 or True:  # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–π
            logger.info("üè† –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é - –ø–æ—Å–µ—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            
            bot = monitor.get_browser_bot()
            if bot:
                try:
                    # –ü–æ—Å–µ—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    bot.visit_page_like_human("https://court.aifc.kz")
                    time.sleep(random.uniform(10, 20))
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                    bot.visit_page_like_human("https://court.aifc.kz/en/legislation")
                    time.sleep(random.uniform(15, 30))
                    
                    logger.info("‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        
        batch_success = 0
        
        for file_num, url in enumerate(batch, 1):
            filename = os.path.basename(url)
            logger.info(f"üì• [{file_num}/{len(batch)}] {filename}")
            
            try:
                # –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ñ–∞–π–ª–æ–º
                if file_num > 1:
                    base_delay = random.uniform(config['min_delay'], config['max_delay'])
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
                    if total_errors > total_success and total_errors > 3:
                        base_delay *= 2
                        logger.info("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É")
                    
                    logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {base_delay:.1f} —Å–µ–∫")
                    time.sleep(base_delay)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                save_dir = monitor.create_aifc_directory_structure(url, monitor.config['download_dir'])
                filename_clean = monitor.get_clean_filename(url)
                save_path = os.path.join(save_dir, filename_clean)
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Å —É–º–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                success = smart_download_with_retries(monitor, url, save_path, logger)
                
                if success:
                    batch_success += 1
                    total_success += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if url in monitor.discovered_files['files']:
                        monitor.discovered_files['files'][url]['downloaded'] = True
                        monitor.discovered_files['files'][url]['last_downloaded'] = datetime.now().isoformat()
                        monitor.discovered_files['files'][url]['is_new'] = False
                    
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {filename_clean}")
                else:
                    total_errors += 1
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {filename}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                monitor.save_downloaded_history()
                monitor.save_discovered_files()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
                total_errors += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞
        batch_success_rate = batch_success / len(batch) if batch else 0
        logger.info(f"üìä –ü–∞–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {batch_success}/{len(batch)} ({batch_success_rate:.1%})")
        
        # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        if batch_num < len(batches):
            pause_time = config['batch_pause'] + random.uniform(-60, 120)
            logger.info(f"üò¥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏: {pause_time:.0f} —Å–µ–∫")
            time.sleep(pause_time)
            
            # –°–±—Ä–æ—Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            if monitor.browser_bot:
                try:
                    monitor.browser_bot.close()
                    monitor.browser_bot = None
                    logger.info("üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(failed_files)
    final_success_rate = total_success / total_files if total_files > 0 else 0
    
    logger.info("=" * 60)
    logger.info("üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {total_success}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    logger.info(f"üìã –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_files}")
    logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {final_success_rate:.1%}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    if monitor.browser_bot:
        try:
            monitor.browser_bot.close()
        except:
            pass
    
    if total_success > 0:
        logger.info("üéâ –£–º–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.info("üòû –§–∞–π–ª—ã –≤—Å–µ –µ—â–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ.")

def smart_download_with_retries(monitor, url, save_path, logger, max_retries=3):
    """–£–º–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    
    for attempt in range(max_retries):
        try:
            logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {os.path.basename(url)}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ—Å—è –∑–∞–¥–µ—Ä–∂–∫–∏
            if attempt > 0:
                retry_delay = [10, 30, 60][min(attempt-1, 2)]
                jitter = random.uniform(-5, 15)
                total_delay = retry_delay + jitter
                
                logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: {total_delay:.1f} —Å–µ–∫")
                time.sleep(total_delay)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å
            result = monitor.download_with_browser_bot(url, save_path)
            
            if result in ["new", "updated"]:
                return True
            elif result == "unchanged":
                logger.info("‚ÑπÔ∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
            if attempt < max_retries - 1:
                error_delay = random.uniform(20, 60)
                logger.info(f"üò¥ –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {error_delay:.1f} —Å–µ–∫")
                time.sleep(error_delay)
    
    return False

if __name__ == "__main__":
    print("üõ°Ô∏è –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    print("=" * 60)
    
    confirm = input("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ")
    if confirm.lower() in ['–¥–∞', 'yes', 'y']:
        smart_retry_with_anti_blocking()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
