#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å AIFC Court
"""

import os
import logging
from browser_bot import AdvancedBrowserBot

def simple_aifc_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    print("ü§ñ === –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AIFC Court ===")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    download_dir = "aifc_documents"
    os.makedirs(download_dir, exist_ok=True)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –±–æ—Ç
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
        bot = AdvancedBrowserBot(headless=True, stealth_mode=True)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ —Å—É–¥–∞...")
        success = bot.visit_page_like_human("https://court.aifc.kz/en/judgments")
        
        if success:
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            print("üîç –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            documents = bot.find_document_links()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
            
            if documents:
                # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                first_doc = documents[0]
                print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {first_doc['url']}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = os.path.basename(first_doc['url']).replace('%20', '_')
                if not filename.endswith('.pdf'):
                    filename += '.pdf'
                
                save_path = os.path.join(download_dir, filename)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
                bot.visit_page_like_human(first_doc['url'])
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫—É–∫–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                import requests
                
                cookies = bot.driver.get_cookies()
                session_cookies = {}
                for cookie in cookies:
                    session_cookies[cookie['name']] = cookie['value']
                
                headers = {
                    'User-Agent': bot.driver.execute_script("return navigator.userAgent;"),
                    'Referer': 'https://court.aifc.kz/en/judgments'
                }
                
                response = requests.get(first_doc['url'], headers=headers, cookies=session_cookies, stream=True)
                response.raise_for_status()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(save_path, 'wb') as f:
                    f.write(response.content)
                
                print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
                if os.path.exists(save_path) and os.path.getsize(save_path) > 0:
                    print("üéâ –£–°–ü–ï–•! –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                    
            else:
                print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        bot.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("=" * 40)
    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    simple_aifc_test()