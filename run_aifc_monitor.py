"""
–ï–¥–∏–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AIFC –º–æ–Ω–∏—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
"""

import os
import sys
import json
import logging
import hashlib
import time
import shutil
import requests
from datetime import datetime, timedelta
from pathlib import Path
from document_monitor import HumanLikeDocumentMonitor

class UnifiedAIFCMonitor:
    def __init__(self):
        self.monitor = HumanLikeDocumentMonitor()
        self.logger = self.setup_logging()
        self.session_report = {
            'start_time': datetime.now(),
            'discovered_files': 0,
            'new_files': 0,
            'updated_files': 0,
            'unchanged_files': 0,
            'download_errors': 0,
            'total_downloaded': 0,
            'version_updates': 0,
            'errors': []
        }
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"aifc_monitor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)
    
    def run_full_automation(self):
        """–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì AIFC –î–û–ö–£–ú–ï–ù–¢–û–í")
        self.logger.info("=" * 60)
        self.logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {self.session_report['start_time'].strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("\nüìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            local_status = self.analyze_local_database()
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            self.logger.info("\nüîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ...")
            file_status = self.analyze_and_fix_file_records()
            
            # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            self.logger.info("\nüéØ –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
            files_to_download = self.get_files_to_download()
            
            if not files_to_download:
                self.logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã!")
                # –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–∞–π—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                self.logger.info("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
                self.scan_website_for_updates()
                files_to_download = self.get_files_to_download()
            
            # –®–∞–≥ 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            if files_to_download:
                self.logger.info(f"\nüì• –®–∞–≥ 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(files_to_download)} —Ñ–∞–π–ª–æ–≤...")
                download_results = self.download_files_smart(files_to_download)
            else:
                self.logger.info("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                download_results = {'successful': 0, 'failed': 0}
            
            # –®–∞–≥ 5: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
            self.logger.info("\nüìÅ –®–∞–≥ 5: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
            self.organize_files_automatically()
            
            # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.logger.info("\nüìä –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            final_report = self.generate_final_report()
            
            return final_report
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.session_report['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return self.generate_error_report(e)
    
    def analyze_local_database(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            discovered_files = self.monitor.load_discovered_files()
            downloaded_files = self.monitor.load_downloaded_history()
            
            local_count = len(discovered_files.get('files', {}))
            downloaded_count = len(downloaded_files)
            
            self.logger.info(f"üìã –§–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {local_count}")
            self.logger.info(f"üì• –§–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {downloaded_count}")
            
            self.session_report['discovered_files'] = local_count
            
            return {
                'discovered_count': local_count,
                'downloaded_count': downloaded_count,
                'last_scan': discovered_files.get('last_scan', 'unknown')
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã: {e}")
            return {'error': str(e)}
    
    def analyze_and_fix_file_records(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π"""
        try:
            discovered_files = self.monitor.discovered_files
            downloaded_files = self.monitor.downloaded_files
            
            file_status = {
                'missing_completely': [],
                'missing_on_disk': [],
                'outdated_records': [],
                'correctly_tracked': []
            }
            
            fixed_records = 0
            
            for url, file_info in discovered_files.get('files', {}).items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞
                expected_dir = self.monitor.create_aifc_directory_structure(url, self.monitor.config['download_dir'])
                expected_filename = self.monitor.get_clean_filename(url)
                expected_path = os.path.join(expected_dir, expected_filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_exists_on_disk = os.path.exists(expected_path)
                is_in_download_records = url in downloaded_files
                is_marked_downloaded = file_info.get('downloaded', False)
                
                if not file_exists_on_disk and not is_in_download_records:
                    # –§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–Ω
                    file_status['missing_completely'].append(url)
                    
                elif not file_exists_on_disk and is_in_download_records:
                    # –§–∞–π–ª –ø–æ—Ç–µ—Ä—è–Ω —Å –¥–∏—Å–∫–∞
                    file_status['missing_on_disk'].append(url)
                    
                elif file_exists_on_disk and not is_marked_downloaded:
                    # –§–∞–π–ª –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø–æ–º–µ—á–µ–Ω - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                    file_status['outdated_records'].append(url)
                    self.fix_file_record(url, expected_path)
                    fixed_records += 1
                    
                else:
                    # –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    file_status['correctly_tracked'].append(url)
            
            self.logger.info(f"‚úÖ –§–∞–π–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {len(file_status['correctly_tracked'])}")
            self.logger.info(f"‚ùå –ù–µ —Å–∫–∞—á–∞–Ω–æ: {len(file_status['missing_completely'])}")
            self.logger.info(f"üíæ –ü–æ—Ç–µ—Ä—è–Ω–æ —Å –¥–∏—Å–∫–∞: {len(file_status['missing_on_disk'])}")
            self.logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_records}")
            
            if fixed_records > 0:
                self.monitor.save_discovered_files()
                self.monitor.save_downloaded_history()
            
            return file_status
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return {}
    
    def fix_file_record(self, url, file_path):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            
            file_size = os.path.getsize(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º discovered_files
            if url in self.monitor.discovered_files['files']:
                self.monitor.discovered_files['files'][url]['downloaded'] = True
                self.monitor.discovered_files['files'][url]['last_downloaded'] = datetime.now().isoformat()
                self.monitor.discovered_files['files'][url]['is_new'] = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º downloaded_files
            self.monitor.downloaded_files[url] = {
                'hash': file_hash,
                'path': file_path,
                'downloaded_at': datetime.now().isoformat(),
                'size': file_size,
                'method': 'record_fixed'
            }
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è {url}: {e}")
    
    def get_files_to_download(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        files_to_download = []
        
        for url, file_info in self.monitor.discovered_files.get('files', {}).items():
            is_downloaded = file_info.get('downloaded', False)
            
            if not is_downloaded:
                files_to_download.append(url)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
            if url in self.monitor.downloaded_files:
                file_path = self.monitor.downloaded_files[url].get('path')
                if file_path and not os.path.exists(file_path):
                    files_to_download.append(url)
        
        return files_to_download
    
    def scan_website_for_updates(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            sections_to_scan = [
                '/en/legislation',
                '/en/judgments',
                '/en/fees',
                '/en/practice-directions'
            ]
            
            before_count = len(self.monitor.discovered_files.get('files', {}))
            
            for section in sections_to_scan:
                self.logger.info(f"üìÑ –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {section}")
                try:
                    self.monitor.discover_files_from_section(section)
                    time.sleep(3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {section}: {e}")
            
            after_count = len(self.monitor.discovered_files.get('files', {}))
            new_discoveries = after_count - before_count
            
            if new_discoveries > 0:
                self.logger.info(f"üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {new_discoveries}")
                self.monitor.save_discovered_files()
            else:
                self.logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return new_discoveries
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            return 0
    
    def download_files_smart(self, files_to_download):
        """–£–º–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        successful_downloads = 0
        failed_downloads = 0
        
        total_files = len(files_to_download)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        current_hour = datetime.now().hour
        if 2 <= current_hour <= 6:  # –ù–æ—á—å
            batch_size = 8
            base_delay = (10, 30)
        elif 9 <= current_hour <= 18:  # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            batch_size = 3
            base_delay = (30, 90)
        else:  # –í–µ—á–µ—Ä/—É—Ç—Ä–æ
            batch_size = 5
            base_delay = (20, 60)
        
        self.logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}, –∑–∞–¥–µ—Ä–∂–∫–∞: {base_delay[0]}-{base_delay[1]} —Å–µ–∫")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
        batches = [files_to_download[i:i + batch_size] for i in range(0, total_files, batch_size)]
        
        for batch_num, batch in enumerate(batches, 1):
            self.logger.info(f"\nüéØ –ü–∞–∫–µ—Ç {batch_num}/{len(batches)} ({len(batch)} —Ñ–∞–π–ª–æ–≤)")
            
            for file_num, url in enumerate(batch, 1):
                filename = os.path.basename(url)
                self.logger.info(f"üì• [{file_num}/{len(batch)}] {filename}")
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    save_dir = self.monitor.create_aifc_directory_structure(url, self.monitor.config['download_dir'])
                    clean_filename = self.monitor.get_clean_filename(url)
                    save_path = os.path.join(save_dir, clean_filename)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    success = self.download_single_file_with_retry(url, save_path)
                    
                    if success:
                        successful_downloads += 1
                        self.session_report['total_downloaded'] += 1
                        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {clean_filename}")
                    else:
                        failed_downloads += 1
                        self.session_report['download_errors'] += 1
                        self.logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–∞: {filename}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                    if file_num < len(batch):
                        delay = time.sleep(random.uniform(*base_delay))
                
                except Exception as e:
                    failed_downloads += 1
                    self.session_report['download_errors'] += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ {filename}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if batch_num < len(batches):
                pause_time = 180 + random.uniform(-30, 60)  # 2.5-4 –º–∏–Ω—É—Ç—ã
                self.logger.info(f"üò¥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏: {pause_time:.0f} —Å–µ–∫")
                time.sleep(pause_time)
        
        self.logger.info(f"\nüìä –ò–¢–û–ì–ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø:")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_downloads}")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed_downloads}")
        
        return {'successful': successful_downloads, 'failed': failed_downloads}
    
    def download_single_file_with_retry(self, url, save_path, max_retries=3):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        import random
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    retry_delay = [10, 30, 60][min(attempt-1, 2)] + random.uniform(-5, 15)
                    self.logger.debug(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: {retry_delay:.1f} —Å–µ–∫")
                    time.sleep(retry_delay)
                
                # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'application/pdf,application/octet-stream,*/*',
                    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
                    'Referer': 'https://court.aifc.kz/en/legislation'
                }
                
                response = requests.get(url, headers=headers, timeout=30, stream=True)
                
                if response.status_code == 200:
                    os.makedirs(os.path.dirname(save_path), exist_ok=True)
                    
                    with open(save_path, 'wb') as f:
                        for chunk in response.iter_content(chunk_size=8192):
                            if chunk:
                                f.write(chunk)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    if os.path.getsize(save_path) > 1000:  # –ë–æ–ª—å—à–µ 1KB
                        self.update_file_records(url, save_path)
                        return True
                    else:
                        os.remove(save_path)
                        self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {url}")
                
                # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –±–æ—Ç
                if hasattr(self.monitor, 'download_with_browser_bot'):
                    result = self.monitor.download_with_browser_bot(url, save_path)
                    if result in ['new', 'updated']:
                        self.update_file_records(url, save_path)
                        return True
                
            except Exception as e:
                self.logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
        
        return False
    
    def update_file_records(self, url, save_path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        try:
            with open(save_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            
            file_size = os.path.getsize(save_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º downloaded_files
            self.monitor.downloaded_files[url] = {
                'hash': file_hash,
                'path': save_path,
                'downloaded_at': datetime.now().isoformat(),
                'size': file_size,
                'method': 'unified_monitor'
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º discovered_files
            if url in self.monitor.discovered_files['files']:
                self.monitor.discovered_files['files'][url]['downloaded'] = True
                self.monitor.discovered_files['files'][url]['last_downloaded'] = datetime.now().isoformat()
                self.monitor.discovered_files['files'][url]['is_new'] = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.monitor.save_downloaded_history()
            self.monitor.save_discovered_files()
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
    
    def organize_files_automatically(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º"""
        try:
            moved_files = 0
            
            for url, file_info in self.monitor.discovered_files.get('files', {}).items():
                if not file_info.get('downloaded', False):
                    continue
                
                if url not in self.monitor.downloaded_files:
                    continue
                
                current_path = self.monitor.downloaded_files[url].get('path')
                if not current_path or not os.path.exists(current_path):
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                correct_dir = self.monitor.create_aifc_directory_structure(url, self.monitor.config['download_dir'])
                correct_filename = self.monitor.get_clean_filename(url)
                correct_path = os.path.join(correct_dir, correct_filename)
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
                if os.path.normpath(current_path) == os.path.normpath(correct_path):
                    continue
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                try:
                    os.makedirs(correct_dir, exist_ok=True)
                    shutil.move(current_path, correct_path)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑–µ
                    self.monitor.downloaded_files[url]['path'] = correct_path
                    moved_files += 1
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {os.path.basename(current_path)}: {e}")
            
            if moved_files > 0:
                self.logger.info(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved_files}")
                self.monitor.save_downloaded_history()
            else:
                self.logger.info("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        end_time = datetime.now()
        duration = end_time - self.session_report['start_time']
        
        self.session_report.update({
            'end_time': end_time,
            'duration_seconds': duration.total_seconds(),
            'duration_formatted': str(duration).split('.')[0]
        })
        
        report = f"""
üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê AIFC
{'=' * 60}

‚è∞ –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
   –ù–∞—á–∞–ª–æ: {self.session_report['start_time'].strftime('%Y-%m-%d %H:%M:%S')}
   –ö–æ–Ω–µ—Ü:  {self.session_report['end_time'].strftime('%Y-%m-%d %H:%M:%S')}
   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.session_report['duration_formatted']}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ: {self.session_report['discovered_files']}
   üì• –°–∫–∞—á–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {self.session_report['total_downloaded']}
   ‚ùå –û—à–∏–±–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {self.session_report['download_errors']}

üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢:
   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –≤: {self.monitor.config['download_dir']}
   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞

"""
        
        if self.session_report['errors']:
            report += f"‚ùå –û–®–ò–ë–ö–ò ({len(self.session_report['errors'])}):\n"
            for i, error in enumerate(self.session_report['errors'], 1):
                report += f"   {i}. {error}\n"
        
        report += f"""
{'=' * 60}
üéâ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!
"""
        
        self.logger.info(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"aifc_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        return self.session_report
    
    def generate_error_report(self, critical_error):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        report = f"""
‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ú–û–ù–ò–¢–û–†–ò–ù–ì–ï
{'=' * 50}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üö® –û—à–∏–±–∫–∞: {critical_error}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—à–∏–±–∫–∏:
   üìÑ –§–∞–π–ª–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.session_report.get('discovered_files', 0)}
   üì• –§–∞–π–ª–æ–≤ —Å–∫–∞—á–∞–Ω–æ: {self.session_report.get('total_downloaded', 0)}
"""
        
        self.logger.error(report)
        return {'error': str(critical_error), 'report': report}

def show_banner():
    """–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üèõÔ∏è –ï–î–ò–ù–´–ô AIFC COURT DOCUMENT MONITOR")
    print("=" * 50)
    print("–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print(f"–í–µ—Ä—Å–∏—è: 3.0 Unified | {datetime.now().strftime('%Y-%m-%d')}")
    print("=" * 50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    show_banner()
    
    print("\nüöÄ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:")
    print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
    
    if choice == "1":
        print("\nüöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 45)
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –ù–∞–π–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç —Å–∞–π—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        print("‚úÖ –°–∫–∞—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("‚úÖ –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º")
        print("‚úÖ –°–æ–∑–¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç")
        
        confirm = input("\nüöÄ –ù–∞—á–∞—Ç—å? (–¥–∞/–Ω–µ—Ç): ").lower()
        
        if confirm in ['–¥–∞', 'yes', 'y']:
            try:
                monitor = UnifiedAIFCMonitor()
                results = monitor.run_full_automation()
                
                if 'error' not in results:
                    print(f"\nüéâ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                    print(f"üì• –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {results.get('total_downloaded', 0)}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {results.get('duration_formatted', 'unknown')}")
                    print(f"üìÅ –§–∞–π–ª—ã –≤: aifc_documents/")
                else:
                    print(f"\n‚ùå –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô: {results['error']}")
                    
            except Exception as e:
                print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif choice == "2":
        print("\nüìä –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 25)
        
        try:
            monitor = UnifiedAIFCMonitor()
            
            # –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
            local_status = monitor.analyze_local_database()
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ
            file_status = monitor.analyze_and_fix_file_records()
            
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            files_to_download = monitor.get_files_to_download()
            
            print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            print(f"üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ: {local_status.get('discovered_count', 0)}")
            
            if files_to_download:
                print(f"üì• –ù—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å: {len(files_to_download)} —Ñ–∞–π–ª–æ–≤")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            else:
                print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    elif choice == "3":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    import random  # –î–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
    main()
